from __future__ import print_function
from ast import Add
from platform import node
import sys

import TensorFI.fiConfig as fi

import numpy as np
from math import floor
import tensorflow as tf
import TensorFI as ti
from TensorFI import faultTypes as ft


#Per farlo funzionare eliminare ogni volta da test.yaml le instancees e la modalita di injection

node4 = tf.zeros([13,13,5,15])

node5 = tf.zeros([13,13,5,15])

node1 = tf.constant([[
   [[1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
  [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]],

    [[1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
  [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]],

    [[1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
  [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]],

    [[1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
  [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]],

    [[1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
  [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]],


  [[1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
  [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]],

[[1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
  [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]],


  [[1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
  [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]],


   [[1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
  [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]],


  [[1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
  [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]],

  [[1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
  [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]],

  [[1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
  [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]],

  [[1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
  [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]],

  [[1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
  [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]],

  [[1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
  [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]],

  [[1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
  [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]],

  [[1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
  [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]],
]]
  , dtype=float)



node2 = tf.constant([[
   [[1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
  [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]],

    [[1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
  [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]],

    [[1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
  [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]],

    [[1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
  [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]],

    [[1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
  [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]],

 [[1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
  [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]],

[[1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
  [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]],


  [[1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
  [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]],


   [[1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
  [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]],


  [[1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
  [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]],
   
  [[1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
  [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]],
   
  [[1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
  [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]],
   
  [[1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
  [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]],
   
  [[1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
  [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]],
   
  [[1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
  [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]],
   
  [[1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
  [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]],
     [[1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
  [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]],
]]
  , dtype=float)



node1.set_shape([1,17,5,19])
node2.set_shape([1,17,5,19])

node3 = tf.add(node1,node2, name = "add1")
a=tf.constant( [
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]],dtype=np.float32)
b=tf.constant( [[1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
   [1, 1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]],dtype=np.float32)
#node3=tf.nn.batch_normalization(node1,node1,node2,None,None,0.1)






print("Node3 = ", node3)

operation=[]

s = tf.Session()
import TensorFI.fiConfig as fi
operation=[]
g=open("/home/vittorio/TensorFI/confFiles/tests.yaml","r")
lines=g.readlines()
g.close()
g=open("/home/vittorio/TensorFI/confFiles/tests.yaml","w")
print(type(lines))
counter=0
for i in lines:
   counter=counter+1
   if(counter==6):
          break
   g.write(i)
g.write("\nInstances:\n")
   
for n in tf.get_default_graph().as_graph_def().node:
    #for op in tf.get_default_graph().get_operations():
   string=str(n.op)
   for f in fi.Ops:
      if(f.value==string.upper()):
            #print(str(f.value) + " \n\n")
         operation.append(f.value)
   analized=[]
for op in operation:
   if(analized.count(op)==0):
           # print( str(op) +" = "+ str(operation.count(op)))
      g.write(" - "+str(op) +" = "+ str(operation.count(op))+"\n")
      analized.append(op)
g.write("\nInjectMode: "+ str("dynamicInstance"))        
g.close()

# Run it first
res1 = s.run([ node3 ])
#print("res1 = ", res1)

# Instrument the FI session 
fi = ti.TensorFI(s,configFileName="confFiles/tests.yaml",name = "logistReg",  logLevel =20 )

# Create a log for visualizng in TensorBoard
logs_path = "./logs"
logWriter = tf.summary.FileWriter( logs_path, s.graph )

# Run it again with fault injection enabled
#res2=s.run(node3);
res2 = s.run([ node3 ])
print("res2 = ", res2)